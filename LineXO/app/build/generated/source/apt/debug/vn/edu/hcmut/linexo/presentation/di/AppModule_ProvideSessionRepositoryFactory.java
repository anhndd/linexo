// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.cache.CacheSource;
import vn.edu.hcmut.linexo.data.repository.SessionRepository;

public final class AppModule_ProvideSessionRepositoryFactory implements Factory<SessionRepository> {
  private final AppModule module;

  private final Provider<CacheSource> cacheSourceProvider;

  public AppModule_ProvideSessionRepositoryFactory(
      AppModule module, Provider<CacheSource> cacheSourceProvider) {
    this.module = module;
    this.cacheSourceProvider = cacheSourceProvider;
  }

  @Override
  public SessionRepository get() {
    return provideInstance(module, cacheSourceProvider);
  }

  public static SessionRepository provideInstance(
      AppModule module, Provider<CacheSource> cacheSourceProvider) {
    return proxyProvideSessionRepository(module, cacheSourceProvider.get());
  }

  public static AppModule_ProvideSessionRepositoryFactory create(
      AppModule module, Provider<CacheSource> cacheSourceProvider) {
    return new AppModule_ProvideSessionRepositoryFactory(module, cacheSourceProvider);
  }

  public static SessionRepository proxyProvideSessionRepository(
      AppModule instance, CacheSource cacheSource) {
    return Preconditions.checkNotNull(
        instance.provideSessionRepository(cacheSource),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
