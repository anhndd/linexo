// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.repository.BoardRepository;
import vn.edu.hcmut.linexo.data.repository.SessionRepository;
import vn.edu.hcmut.linexo.data.repository.UserRepository;
import vn.edu.hcmut.linexo.domain.interactor.Usecase;

public final class AppModule_ProvidePlayUsecaseFactory implements Factory<Usecase> {
  private final AppModule module;

  private final Provider<SessionRepository> sessionRepositoryProvider;

  private final Provider<BoardRepository> boardRepositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  public AppModule_ProvidePlayUsecaseFactory(
      AppModule module,
      Provider<SessionRepository> sessionRepositoryProvider,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider) {
    this.module = module;
    this.sessionRepositoryProvider = sessionRepositoryProvider;
    this.boardRepositoryProvider = boardRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public Usecase get() {
    return provideInstance(
        module, sessionRepositoryProvider, boardRepositoryProvider, userRepositoryProvider);
  }

  public static Usecase provideInstance(
      AppModule module,
      Provider<SessionRepository> sessionRepositoryProvider,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return proxyProvidePlayUsecase(
        module,
        sessionRepositoryProvider.get(),
        boardRepositoryProvider.get(),
        userRepositoryProvider.get());
  }

  public static AppModule_ProvidePlayUsecaseFactory create(
      AppModule module,
      Provider<SessionRepository> sessionRepositoryProvider,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new AppModule_ProvidePlayUsecaseFactory(
        module, sessionRepositoryProvider, boardRepositoryProvider, userRepositoryProvider);
  }

  public static Usecase proxyProvidePlayUsecase(
      AppModule instance,
      SessionRepository sessionRepository,
      BoardRepository boardRepository,
      UserRepository userRepository) {
    return Preconditions.checkNotNull(
        instance.providePlayUsecase(sessionRepository, boardRepository, userRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
