// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.repository.BoardRepository;
import vn.edu.hcmut.linexo.data.repository.RoomRepository;
import vn.edu.hcmut.linexo.data.repository.UserRepository;
import vn.edu.hcmut.linexo.domain.interactor.Usecase;

public final class AppModule_ProvidePlayUsecaseFactory implements Factory<Usecase> {
  private final AppModule module;

  private final Provider<BoardRepository> boardRepositoryProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<RoomRepository> roomRepositoryProvider;

  public AppModule_ProvidePlayUsecaseFactory(
      AppModule module,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    this.module = module;
    this.boardRepositoryProvider = boardRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.roomRepositoryProvider = roomRepositoryProvider;
  }

  @Override
  public Usecase get() {
    return provideInstance(
        module, boardRepositoryProvider, userRepositoryProvider, roomRepositoryProvider);
  }

  public static Usecase provideInstance(
      AppModule module,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    return proxyProvidePlayUsecase(
        module,
        boardRepositoryProvider.get(),
        userRepositoryProvider.get(),
        roomRepositoryProvider.get());
  }

  public static AppModule_ProvidePlayUsecaseFactory create(
      AppModule module,
      Provider<BoardRepository> boardRepositoryProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    return new AppModule_ProvidePlayUsecaseFactory(
        module, boardRepositoryProvider, userRepositoryProvider, roomRepositoryProvider);
  }

  public static Usecase proxyProvidePlayUsecase(
      AppModule instance,
      BoardRepository boardRepository,
      UserRepository userRepository,
      RoomRepository roomRepository) {
    return Preconditions.checkNotNull(
        instance.providePlayUsecase(boardRepository, userRepository, roomRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
