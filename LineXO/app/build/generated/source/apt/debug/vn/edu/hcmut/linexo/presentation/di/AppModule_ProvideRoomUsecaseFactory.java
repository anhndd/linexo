// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.repository.RoomRepository;
import vn.edu.hcmut.linexo.data.repository.UserRepository;
import vn.edu.hcmut.linexo.domain.interactor.Usecase;

public final class AppModule_ProvideRoomUsecaseFactory implements Factory<Usecase> {
  private final AppModule module;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<RoomRepository> roomRepositoryProvider;

  public AppModule_ProvideRoomUsecaseFactory(
      AppModule module,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    this.module = module;
    this.userRepositoryProvider = userRepositoryProvider;
    this.roomRepositoryProvider = roomRepositoryProvider;
  }

  @Override
  public Usecase get() {
    return provideInstance(module, userRepositoryProvider, roomRepositoryProvider);
  }

  public static Usecase provideInstance(
      AppModule module,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    return proxyProvideRoomUsecase(
        module, userRepositoryProvider.get(), roomRepositoryProvider.get());
  }

  public static AppModule_ProvideRoomUsecaseFactory create(
      AppModule module,
      Provider<UserRepository> userRepositoryProvider,
      Provider<RoomRepository> roomRepositoryProvider) {
    return new AppModule_ProvideRoomUsecaseFactory(
        module, userRepositoryProvider, roomRepositoryProvider);
  }

  public static Usecase proxyProvideRoomUsecase(
      AppModule instance, UserRepository userRepository, RoomRepository roomRepository) {
    return Preconditions.checkNotNull(
        instance.provideRoomUsecase(userRepository, roomRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
