// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.repository.BoardRepository;
import vn.edu.hcmut.linexo.data.repository.RoomRepository;
import vn.edu.hcmut.linexo.data.repository.SessionRepository;
import vn.edu.hcmut.linexo.data.repository.UserRepository;
import vn.edu.hcmut.linexo.domain.interactor.Usecase;
import vn.edu.hcmut.linexo.presentation.view.play.PlayActivity;
import vn.edu.hcmut.linexo.presentation.view.play.PlayActivity_MembersInjector;
import vn.edu.hcmut.linexo.presentation.view.room.RoomActivity;
import vn.edu.hcmut.linexo.presentation.view.room.RoomActivity_MembersInjector;
import vn.edu.hcmut.linexo.presentation.view.splash.SplashActivity;
import vn.edu.hcmut.linexo.presentation.view.splash.SplashActivity_MembersInjector;
import vn.edu.hcmut.linexo.presentation.view_model.ViewModel;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private AppModule_ProvideNetworkSourceFactory provideNetworkSourceProvider;

  private AppModule_ProvideContextFactory provideContextProvider;

  private AppModule_ProvideCacheSourceFactory provideCacheSourceProvider;

  private AppModule_ProvideLocalSourceFactory provideLocalSourceProvider;

  private Provider<UserRepository> provideUserRepositoryProvider;

  private Provider<RoomRepository> provideRoomRepositoryProvider;

  private Provider<SessionRepository> provideSessionRepositoryProvider;

  private Provider<BoardRepository> provideBoardRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Usecase getNamedUsecase() {
    return AppModule_ProvideRoomUsecaseFactory.proxyProvideRoomUsecase(
        appModule, provideUserRepositoryProvider.get(), provideRoomRepositoryProvider.get());
  }

  private ViewModel getNamedViewModel() {
    return AppModule_ProvideRoomViewModelFactory.proxyProvideRoomViewModel(
        appModule,
        AppModule_ProvideContextFactory.proxyProvideContext(appModule),
        getNamedUsecase());
  }

  private Usecase getNamedUsecase2() {
    return AppModule_ProvidePlayUsecaseFactory.proxyProvidePlayUsecase(
        appModule,
        provideSessionRepositoryProvider.get(),
        provideBoardRepositoryProvider.get(),
        provideUserRepositoryProvider.get());
  }

  private ViewModel getNamedViewModel2() {
    return AppModule_ProvidePlayViewModelFactory.proxyProvidePlayViewModel(
        appModule,
        AppModule_ProvideContextFactory.proxyProvideContext(appModule),
        getNamedUsecase2());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appModule = builder.appModule;
    this.provideNetworkSourceProvider =
        AppModule_ProvideNetworkSourceFactory.create(builder.appModule);
    this.provideContextProvider = AppModule_ProvideContextFactory.create(builder.appModule);
    this.provideCacheSourceProvider =
        AppModule_ProvideCacheSourceFactory.create(builder.appModule, provideContextProvider);
    this.provideLocalSourceProvider = AppModule_ProvideLocalSourceFactory.create(builder.appModule);
    this.provideUserRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideUserRepositoryFactory.create(
                builder.appModule,
                provideNetworkSourceProvider,
                provideCacheSourceProvider,
                provideLocalSourceProvider));
    this.provideRoomRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideRoomRepositoryFactory.create(
                builder.appModule, provideNetworkSourceProvider));
    this.provideSessionRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideSessionRepositoryFactory.create(
                builder.appModule, provideCacheSourceProvider));
    this.provideBoardRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideBoardRepositoryFactory.create(
                builder.appModule, provideNetworkSourceProvider));
  }

  @Override
  public void inject(SplashActivity splashActivity) {
    injectSplashActivity(splashActivity);
  }

  @Override
  public void inject(RoomActivity roomActivity) {
    injectRoomActivity(roomActivity);
  }

  @Override
  public void inject(PlayActivity playActivity) {
    injectPlayActivity(playActivity);
  }

  private SplashActivity injectSplashActivity(SplashActivity instance) {
    SplashActivity_MembersInjector.injectViewModel(
        instance, AppModule_ProvideSplashViewModelFactory.proxyProvideSplashViewModel(appModule));
    return instance;
  }

  private RoomActivity injectRoomActivity(RoomActivity instance) {
    RoomActivity_MembersInjector.injectViewModel(instance, getNamedViewModel());
    return instance;
  }

  private PlayActivity injectPlayActivity(PlayActivity instance) {
    PlayActivity_MembersInjector.injectViewModel(instance, getNamedViewModel2());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }
}
