// Generated by Dagger (https://google.github.io/dagger).
package vn.edu.hcmut.linexo.presentation.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import vn.edu.hcmut.linexo.data.repository.MessageRepository;
import vn.edu.hcmut.linexo.domain.interactor.Usecase;

public final class AppModule_ProvideChatUsecaseFactory implements Factory<Usecase> {
  private final AppModule module;

  private final Provider<MessageRepository> messageRepositoryProvider;

  public AppModule_ProvideChatUsecaseFactory(
      AppModule module, Provider<MessageRepository> messageRepositoryProvider) {
    this.module = module;
    this.messageRepositoryProvider = messageRepositoryProvider;
  }

  @Override
  public Usecase get() {
    return provideInstance(module, messageRepositoryProvider);
  }

  public static Usecase provideInstance(
      AppModule module, Provider<MessageRepository> messageRepositoryProvider) {
    return proxyProvideChatUsecase(module, messageRepositoryProvider.get());
  }

  public static AppModule_ProvideChatUsecaseFactory create(
      AppModule module, Provider<MessageRepository> messageRepositoryProvider) {
    return new AppModule_ProvideChatUsecaseFactory(module, messageRepositoryProvider);
  }

  public static Usecase proxyProvideChatUsecase(
      AppModule instance, MessageRepository messageRepository) {
    return Preconditions.checkNotNull(
        instance.provideChatUsecase(messageRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
